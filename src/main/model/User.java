package model;

import java.io.*;
import java.util.ArrayList;
import java.util.Objects;

/*
    Author: Michael DeMarco
    CS ID: v1x2b

    Working project name is 'iCite,' a tool to help students write papers.

    This is the base class for the program. All assignments are nested from the main user of the software. In
    the first version, there will only be one user, but the reason behind in the class is to allow for
    extensibility for more users (i.e., multiple people on the same computer). This class contains all information
    the user would need: an ID and a list of their papers.
 */

public class User implements Serializable {
    private String name;
    private ArrayList<Paper> papers;

    // EFFECTS: creates a user based on a specified name parameters and an empty list of papers
    public User(String name) {
        this.name = name;
        this.papers = new ArrayList<>();
    }

    // MODIFIES: this
    // EFFECTS: adds a give paper to the list of papers
    public void addPaper(Paper paper) {
        papers.add(paper);
    }

    // MODIFIES: this
    // EFFECTS: if a paper exists in papers, removes that paper and returns true; else false
    public boolean removePaper(Paper paper) {
        for (Paper p : this.papers) {
            if (p.equals(paper)) {
                this.papers.remove(paper);
                return true;
            }
        }
        return false;
    }

    // GETTERS & SETTERS

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList<Paper> getPapers() {
        return this.papers;
    }

    public void setPapers(ArrayList<Paper> papers) {
        this.papers = papers;
    }

    // EFFECTS: prints nicely formatted user object with all fields
    @Override
    public String toString() {
        String paperString = "";
        for (int i = 0; i < papers.size(); i++) {
            paperString += papers.toString();
        }
        return "This user is named " + this.name + " and has these papers " + paperString;
    }

    // EFFECTS: checks if two users are equal (via all fields)
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User user = (User) o;
        return getName().equals(user.getName())
                && getPapers().equals(user.getPapers());
    }

    // EFFECTS: new hash code method generated by IntelliJ
    @Override
    public int hashCode() {
        return Objects.hash(getName(), getPapers());
    }
}
